# -*- coding: utf-8 -*-
"""1-listao.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1o4kETAI6OhKmcaflqpgh8N5tCFYUQFac
"""

# 1. Faça um programa que receba dois números inteiros e gere os números inteiros que estão no intervalo compreendido por eles.

def numeros_no_intervalo(num1, num2):
    # Verifica qual é o menor e o maior número
    menor = min(num1, num2)
    maior = max(num1, num2)

    # Gera os números no intervalo compreendido por eles
    numeros = list(range(menor, maior + 1))

    return numeros

# Recebe os dois números inteiros do usuário
num1 = int(input("Digite o primeiro número inteiro: "))
num2 = int(input("Digite o segundo número inteiro: "))

# Chama a função e imprime os números no intervalo
print("Números no intervalo:", numeros_no_intervalo(num1, num2))

# 2. Altere o programa anterior para mostrar no final a soma dos números.

soma = 0
while True:
    try:
        numero = float(input("Digite um número (ou '0' para sair): "))
        soma += numero
        if numero == 0:
            break
    except ValueError:
        print("Por favor, digite um número válido.")

print("A soma dos números é:", soma)

# 3. Faça um programa que peça 10 números inteiros, calcule e mostre a quantidade de números pares e a quantidade de números impares.

numeros_pares = 0
numeros_impares = 0

for i in range(10):
    numero = int(input(f"Digite o {i+1}º número inteiro: "))
    if numero % 2 == 0:
        numeros_pares += 1
    else:
        numeros_impares += 1

print(f"Quantidade de números pares: {numeros_pares}")
print(f"Quantidade de números ímpares: {numeros_impares}")

# 4. A série de Fibonacci é formada pela sequência 1,1,2,3,5,8,13,21,34,55,... Faça um programa capaz degerar a série até o enésimo termo.

def fibonacci(n):
    fib_sequence = [1, 1]
    for i in range(2, n):
        next_term = fib_sequence[-1] + fib_sequence[-2]
        fib_sequence.append(next_term)
    return fib_sequence[:n]

n = int(input("Digite o valor de n para gerar a série de Fibonacci até o enésimo termo: "))
fib_series = fibonacci(n)
print("A série de Fibonacci até o enésimo termo é:", fib_series)

# 5. Faça um programa que calcule o fatorial de um número inteiro fornecido pelo usuário. Ex.:5!=5.4.3.2.1=120

def calcular_fatorial(numero):
    if numero == 0:
        return 1
    else:
        return numero * calcular_fatorial(numero - 1)

numero = int(input("Digite um número inteiro para calcular o fatorial: "))
if numero < 0:
    print("Não é possível calcular o fatorial de um número negativo.")
else:
    resultado = calcular_fatorial(numero)
    print(f"O fatorial de {numero} é {resultado}.")

# 6. Faça um programa que peça um número inteiro e determine se ele é ou não umnúmero primo. Um número primo é aquele que é divisível somente por ele mesmo e por 1.

def is_prime(num):
    if num <= 1:
        return False
    elif num == 2:
        return True
    elif num % 2 == 0:
        return False
    else:
        for i in range(3, int(num ** 0.5) + 1, 2):
            if num % i == 0:
                return False
        return True

numero = int(input("Digite um número inteiro: "))

if is_prime(numero):
    print(f"{numero} é um número primo.")
else:
    print(f"{numero} não é um número primo.")

# 7. Faça um programa que peça um número inteiro e determine se ele é ou não umnúmero primo, caso o número não seja primo, por quais número ele é divisível.

def verifica_primo(numero):
    if numero <= 1:
        return False
    for i in range(2, numero):
        if numero % i == 0:
            return False, i
    return True, None

numero = int(input("Digite um número inteiro: "))
primo, divisor = verifica_primo(numero)

if primo:
    print(f"O número {numero} é primo.")
else:
    print(f"O número {numero} não é primo. Ele é divisível por {divisor}.")

# 8. Faça um programa que peça para n pessoas a sua idade, ao final o programadeverá verificar se a média de idade da turma varia entre 0 e 25,26 e 60 emaior que 60; e então, dizer se a turma é jovem, adulta ou idosa, conforme amédia calculada.

def calcular_media(idades):
    soma_idades = sum(idades)
    return soma_idades / len(idades)

def classificar_turma(media):
    if media <= 25:
        return "jovem"
    elif 26 <= media <= 60:
        return "adulta"
    else:
        return "idosa"

def main():
    n = int(input("Quantas pessoas na turma? "))
    idades = []
    for i in range(n):
        idade = int(input(f"Digite a idade da pessoa {i+1}: "))
        idades.append(idade)

    media = calcular_media(idades)
    print(f"A média de idade da turma é: {media:.2f}")

    classificacao = classificar_turma(media)
    print(f"A turma é {classificacao}.")

if __name__ == "__main__":
    main()

# 9. Numa eleição existem três candidatos. Faça um programa que peça o número total de eleitores.Peça para cada eleitor votar e ao final mostrar o número de votos de cada candidato.

def main():
    num_eleitores = int(input("Digite o número total de eleitores: "))
    votos_candidato1 = 0
    votos_candidato2 = 0
    votos_candidato3 = 0

    for eleitor in range(1, num_eleitores + 1):
        print(f"Eleitor {eleitor}:")
        voto = int(input("Digite o número do candidato (1, 2 ou 3): "))
        if voto == 1:
            votos_candidato1 += 1
        elif voto == 2:
            votos_candidato2 += 1
        elif voto == 3:
            votos_candidato3 += 1
        else:
            print("Voto inválido, por favor, digite novamente.")

    print("\nResultado da votação:")
    print(f"Candidato 1: {votos_candidato1} votos")
    print(f"Candidato 2: {votos_candidato2} votos")
    print(f"Candidato 3: {votos_candidato3} votos")

if __name__ == "__main__":
    main()

# 10. Faça um programa que leia dez conjuntos de dois valores, o primeiro representando o número doaluno e o segundo representando a sua altura em centímetros. Encontre o aluno mais alto e o maisbaixo. Mostre o número do aluno mais alto e o número do aluno mais baixo, junto com suas alturas.

# Inicializando variáveis para armazenar o número do aluno mais alto e mais baixo,
# assim como suas alturas
numero_aluno_mais_alto = 0
altura_aluno_mais_alto = 0
numero_aluno_mais_baixo = 0
altura_aluno_mais_baixo = float('inf')  # Inicializando com um valor infinitamente alto

# Iterando sobre os dez conjuntos de valores
for i in range(1, 11):
    numero_aluno = int(input(f"Digite o número do aluno {i}: "))
    altura_aluno = float(input(f"Digite a altura do aluno {i} em centímetros: "))

    # Verificando se o aluno é o mais alto até o momento
    if altura_aluno > altura_aluno_mais_alto:
        numero_aluno_mais_alto = numero_aluno
        altura_aluno_mais_alto = altura_aluno

    # Verificando se o aluno é o mais baixo até o momento
    if altura_aluno < altura_aluno_mais_baixo:
        numero_aluno_mais_baixo = numero_aluno
        altura_aluno_mais_baixo = altura_aluno

# Exibindo os resultados
print(f"O aluno mais alto é o número {numero_aluno_mais_alto} com {altura_aluno_mais_alto}cm de altura.")
print(f"O aluno mais baixo é o número {numero_aluno_mais_baixo} com {altura_aluno_mais_baixo}cm de altura.")

# 11. Foi feita uma estatística em cinco cidades brasileiras para coletar dados sobre acidentes de trânsito.Foram obtidos os seguintes dados: Código da cidade; Número de veículos de passeio (em 1999); Número de acidentes de trânsito com vítimas (em 1999).Deseja-se saber: Qual o maior e menor índice de acidentes de trânsito e a que cidade pertence; Qual a média de veículos nas cinco cidades juntas; Qual a média de acidentes de trânsito nas cidades com menos de 2.000 veículos de passeio.

# Dados das cinco cidades (código da cidade, número de veículos, número de acidentes)
dados_cidades = [
    (1, 1500, 20),
    (2, 2000, 15),
    (3, 2500, 25),
    (4, 1800, 18),
    (5, 2200, 30)
]

# Calculando o maior e menor índice de acidentes e a que cidade pertence
maior_indice = max(dados_cidades, key=lambda x: x[2])
menor_indice = min(dados_cidades, key=lambda x: x[2])

print("Maior índice de acidentes:", maior_indice[2], "em cidade", maior_indice[0])
print("Menor índice de acidentes:", menor_indice[2], "em cidade", menor_indice[0])

# Calculando a média de veículos nas cinco cidades juntas
total_veiculos = sum(cidade[1] for cidade in dados_cidades)
media_veiculos = total_veiculos / len(dados_cidades)
print("Média de veículos nas cinco cidades:", media_veiculos)

# Calculando a média de acidentes de trânsito nas cidades com menos de 2.000 veículos de passeio
cidades_menos_2000_veiculos = [cidade for cidade in dados_cidades if cidade[1] < 2000]
if cidades_menos_2000_veiculos:
    media_acidentes_menos_2000 = sum(cidade[2] for cidade in cidades_menos_2000_veiculos) / len(cidades_menos_2000_veiculos)
    print("Média de acidentes nas cidades com menos de 2.000 veículos:", media_acidentes_menos_2000)
else:
    print("Não há cidades com menos de 2.000 veículos de passeio.")



